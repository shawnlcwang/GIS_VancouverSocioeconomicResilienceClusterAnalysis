library(redist)
redist.preproc <- function(adjobj, popvec, initcds = NULL, ndists = NULL,
popcons = NULL, grouppopvec = NULL, ssdmat = NULL,
beta = 0, temper = NULL, constraint = NULL,
betaseq = NULL, betaseqlength = NULL,
betaweights = NULL, adjswaps = TRUE, maxiterrsg = NULL,
contiguitymap = NULL
){
if(missing(adjobj)){
source('D:/MSc Thesis/Modifiable Areal Unit Problem Analysis/MAUP Softwares/Redist/MAUP_2006_DA.R', echo=TRUE)
source('D:/MSc Thesis/Modifiable Areal Unit Problem Analysis/MAUP Softwares/Redist/MAUP_2006_DA.R', echo=TRUE)
redist.preproc <- function(MAUP_2006_DA_redist_input.shp, popvec, initcds = NULL, ndists = NULL,
popcons = NULL, grouppopvec = NULL, ssdmat = NULL,
beta = 0, temper = NULL, constraint = NULL,
betaseq = NULL, betaseqlength = NULL,
betaweights = NULL, adjswaps = TRUE, maxiterrsg = NULL,
contiguitymap = NULL
){
#########################
## Inputs to function: ##
#########################
## adjobj - adjacency object of geographic units. Accepts adjlist or adjmat
## popvec - population of each of the units
## initcds - initial congressional units. Must be contiguous partitions. Default is NULL
## ndists - number of desired congressional units. Default is NULL
## popcons - strength of hard population constraint. Defaulted to no
##           constraint. popcons = 0.01 implies a 1% population constraint.
## grouppopvec - vector of populations for a minority group. To be used
##               in conjunction with the segregation M-H constraint
## ssdmat - matrix of squared distances between population units.
##          To be used when applying the compactness constraint.
## beta - target strength of constraint in MH ratio. Defaults to 0.
## temper - whether to use tempering (parallel or simulated) algorithms.
##          Defaults to `none` (no tempering)
## constraint - which constraint to apply. Defaults to `none` (no tempering)
## betaseq - Spacing for beta sequence if tempering. Default is power law
##           spacing, but can also be provided by user
## betaseqlength - Number of temperatures in the beta sequence. Default is
##                 ten
## betaweights - Vector of weights for beta sequence. Provided by user
## adjswaps - Flag for adjacent swaps for geyer-thompson tempering or MPI
##            parallel tempering. Default to TRUE
## maxiterrsg - Maximum number of iterations for RSG algorithm
## contiguitymap - Distance criteria for adjacency list from input map
#######################
## Check missingness ##
#######################
if(missing(adjobj)){
stop("Please supply adjacency matrix or list")
}
if(missing(popvec)){
stop("Please supply vector of geographic unit populations")
}
if((beta == 0 & temper == "none" & constraint != "none") |
(beta == 0 & temper == "simulated") |
(temper != "none" & constraint == "none")){
stop("If applying constraints or using simulated tempering, please set non-zero constraint and specify the constraint.")
}
if(!(temper %in% c("none", "simulated", "parallel"))){
stop("Please specify either `none`, `simulated` or `parallel` for tempering argument")
}
if(!(constraint %in% c("none", "compact", "segregation",
"population", "similarity"))){
stop("Please specify `none`, `compact`, `segregation`, `population`, or `similarity` for constraint")
}
############################################
## If not a list, convert adjlist to list ##
############################################
if(!is.list(adjobj)){
## If a matrix, check to see if adjacency matrix
if(is.matrix(adjobj)){
## Is it square?
## All binary entries?
squaremat <- (nrow(adjobj) == ncol(adjobj))
binary <- ((length(unique(c(adjobj))) == 2) &
(sum(unique(c(adjobj)) %in% c(0, 1)) == 2))
## Diagonal elements all 1?
diag <- (sum(diag(adjobj)) == nrow(adjobj))
## Symmetric?
symmetric <- isSymmetric(adjobj)
## If all are true, change to adjlist and automatically zero-index
if(squaremat & binary & diag & symmetric){
## Initialize object
adjlist <- vector("list", nrow(adjobj))
## Loop through rows in matrix
for(i in 1:nrow(adjobj)){
## Extract row
adjvec <- adjobj[,i]
## Find elements it is adjacent to
inds <- which(adjobj == 1)
## Remove self-adjacency
inds <- inds[inds != i,]
## Zero-index
inds <- inds - 1
## Put in adjlist
adjlist[[i]] <- inds
}
}else { ## If not valid adjacency matrix, throw error
stop("Please input valid adjacency matrix")
}
}else if(class(adjobj) == "SpatialPolygonsDataFrame"){ ## shp object
## Distance criterion
queens <- ifelse(contiguitymap == "rooks", FALSE, TRUE)
## Convert shp object to adjacency list
adjlist <- poly2nb(adjobj, queen = queens)
install.packages("rgenoud")
